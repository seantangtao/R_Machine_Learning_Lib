#准备数据
data1=c(-1,-1,-1) ;
data2=c(-1,1,1);
data3=c(1,-1,1);
data4=c(1,1,-1);
#合并为样本数据框
sample_data=as.data.frame(rbind(data1,data2,data3,data4));
names(sample_data)=c('x1','x2','y');

#sample_data 结构如下
#sample_data
#       x1 x2  y
#data1 -1 -1 -1
#data2 -1  1  1
#data3  1 -1  1
#data4  1  1 -1


#原始3维空间中的数据可视化 
qplot(x1,x2,data=sample_data,geom="point",xlab="x1",ylab="x2",color=y);
#用核函数映射到6维空间

#调用R kernlab 核函数包 用于和我们的人工代码比较
library(kernlab);
dt <- as.matrix(sample_data[1:2]) ;

K=polydot(2) ;
#设置核函数参数 ，这里用了多项式核，参数为2, k(x,x') = (t(X)*X^2  +1)^2

KM=kernelMatrix(K,dt) ;
#获得 核矩阵
 
#      data1 data2 data3 data4
#data1     9     1     1     1
#data2     1     9     1     1
#data3     1     1     9     1
#data4     1     1     1     9


z1=c(1,1,1,1);
z2=(2^(1/2))*sample_data[1];
z3=(2^(1/2))*sample_data[2];
z4=(sample_data[1]*sample_data[2])*2^(1/2);
z5=sample_data[1]^2;
z6=sample_data[2]^2;





phiX=as.matrix(cbind(z1,z2,z3,z4,z5,z6));
ph13=as.matrix(phiX[3]);

phiX%*%phiX[1,]
     [,1]
[1,]    9
[2,]    1
[3,]    1
[4,]    1
phiX%*%phiX[2,]
     [,1]
[1,]    1
[2,]    9
[3,]    1
[4,]    1
phiX%*%phiX[3,]
     [,1]
[1,]    1
[2,]    1
[3,]    9
[4,]    1
phiX%*%phiX[4,]
     [,1]
[1,]    1
[2,]    1
[3,]    1
phiX %*% t(phiX)
phiX %*% t(phiX)
     [,1] [,2] [,3] [,4]
[1,]    9    1    1    1
[2,]    1    9    1    1
[3,]    1    1    9    1
[4,]    1    1    1    9



#(t(X)*X^2  +1)^2
data1=c(-1,-1,-1) ;
data2=c(-1,1,1);
data3=c(1,-1,1);
data4=c(1,1,-1);
#合并为样本数据框
sample_data=as.data.frame(rbind(data1,data2,data3,data4));
names(sample_data)=c('x1','x2','y');


kernel <- function(vector1,vector2,type="poly"){
  if(type == "poly"){
    return((sum(vector1*vector2)+1)^2)
  }
}


  n <- nrow(dataSet)
  km <- matrix(rep(0,n*n),nrow=n)
  for(i in 1:n){
    for(j in i:n){
      value <- kernel(dataSet[i,],dataSet[j,],"poly")
      km[i,j] <- value
      km[j,i] <- value
    }
  }
km




  n <- nrow(dataSet)
  km <- matrix(rep(0,n*n),nrow=n)
  for(i in 1:n){
    for(j in i:n){
      value <- kernel(dataSet[i,],dataSet[j,],"linear")
      km[i,j] <- value
      km[j,i] <- value
    }
  }
km


